{"version":3,"file":"tonal.min.js","sources":["../packages/note/build/es6.js","../packages/array/build/es6.js","../packages/interval/build/es6.js","../packages/distance/build/es6.js","../packages/pcset/build/es6.js","../packages/scale/build/es6.js","../packages/chord/build/es6.js","../packages/key/build/es6.js","../packages/dictionary/build/es6.js","../packages/tonal/index.js"],"sourcesContent":["/**\n * [![npm version](https://img.shields.io/npm/v/tonal-note.svg)](https://www.npmjs.com/package/tonal-note)\n * [![tonal](https://img.shields.io/badge/tonal-note-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-note` is a collection of functions to manipulate musical notes in scientific notation\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as note from 'tonal-note'\n * // or const note = require('tonal-note')\n * note.name('bb2') // => 'Bb2'\n * note.chroma('bb2') // => 10\n * note.midi('a4') // => 69\n * note.freq('a4') // => 440\n * note.oct('G3') // => 3\n * \n * // part of tonal\n * const tonal = require('tonal')\n * tonal.note.midi('d4') // => 62\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-note](https://nodei.co/npm/tonal-note.png?mini=true)](https://npmjs.org/package/tonal-note/)\n *\n * ## API Documentation\n *\n * @module note\n */\n\nvar NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\nvar GROUPED = \"C C#/Db D D#/Eb E F F#/Gb G G#/Ab A A#/Bb B\".split(\" \");\nvar FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\nvar SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n * @param {boolean} sharps - true to use sharps, flats otherwise\n * @return {Array}\n */\nexport var names = function (sharps) { return (sharps ? SHARPS : FLATS).slice(); };\n\n/**\n * Get a list of names with enharmonics\n * @param {boolean} grouped \n * @return {Array} an array of names\n */\nexport var namesEnh = function (grouped) { return (grouped ? GROUPED : NAMES).slice(); };\n\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\nexport function tokenize(str) {\n  str = str || str === 0 ? str : \"\";\n  var m = REGEX.exec(str);\n  if (!m) { return null; }\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nvar properties = function (str) {\n  var tokens = tokenize(str);\n  if (tokens === null || tokens[3] !== \"\") { return NO_NOTE; }\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var oct = tokens[2];\n  var p = { letter: letter, acc: acc };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + oct;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = oct.length ? +oct : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get note properties. It returns an object with the following information:\n * \n * - name {String}: the note name. The letter is always in uppercase\n * - letter {String}: the note letter, always in uppercase\n * - acc {String}: the note accidentals\n * - octave {Number}: the octave or null if not present\n * - pc {String}: the pitch class (letter + accidentals)\n * - step {Number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {Number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {Number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {Number}: the note midi number\n * - freq {Number}: the frequency using an equal temperament at 440Hz\n * \n * This function *always* returns an object with all this properties, but if it's\n * not a valid note all properties will be null.\n * \n * The returned object can't be mutated.\n * \n * @param {String} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * note.props('fx-3').name // => 'F##-3'\n * note.props('invalid').name // => null\n * note.props('C#3').oct // => 3\n * note.props().oct // => null\n */\nexport function props(str) {\n  if (typeof str !== \"string\") { return NO_NOTE; }\n  return cache[str] === undefined ? (cache[str] = properties(str)) : cache[str];\n}\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n * \n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * const note = require('tonal-note')\n * note.name('cb2') // => 'Cb2'\n * ['c', 'db3', '2', 'g+', 'gx4'].map(note.name) // => ['C', 'Db3', null, null, 'G##4']\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * tonal.pc('Db3') // => 'Db'\n * tonal.map(tonal.pc, 'db3 bb6 fx2') // => [ 'Db', 'Bb', 'F##']\n */\nexport var pc = function (str) { return props(str).pc; };\n\n/**\n * Get the note midi number\n * (an alias of tonal-midi `toMidi` function)\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * note.midi('C4') // => 60\n * note.midi(60) // => 60\n * @see midi.toMidi\n */\nexport var midi = function (note) { return props(note).midi || +note || null; };\n\n/**\n * Get the frequency from midi number\n * \n * @param {Number} midi - the note midi number\n * @param {Number} tuning - (Optional) 440 by default\n * @return {Number} the frequency or null if not valid note midi\n */\nexport var midiToFreq = function (midi, tuning) {\n    if ( tuning === void 0 ) tuning = 440;\n\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {Number} the frequency\n * @example\n * note.freq('A4') // => 440\n * note.freq(69) // => 440\n */\nexport var freq = function (note) { return props(note).freq || midiToFreq(note); };\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n * \n * @param {Number} frequency\n * @return {Number}\n * @example\n * note.freqToMidi(220)); //=> 57;\n * note.freqToMidi(261.62)); //=> 60;\n * note.freqToMidi(261)); //=> 59.96;\n */\nexport var freqToMidi = function (freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * const note = require('tonal-note')\n * note.chroma('Cb') // => 11\n * ['C', 'D', 'E', 'F'].map(note.chroma) // => [0, 2, 4, 5]\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn't have an octave or not a valid note\n * @example\n * note.oct('C#4') // => 4\n * note.oct('C') // => null\n * note.oct('blah') // => undefined\n */\nexport var oct = function (str) { return props(str).oct; };\n\nvar LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it's letter (0 = C, 1 = D, 2 = E)\n * @param {number} step \n * @return {string} the letter\n * @example\n * note.stepToLetter(3) // => \"F\"\n */\nexport var stepToLetter = function (step) { return LETTERS[step]; };\n\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\nvar numToStr = function (num, op) { return (typeof num !== \"number\" ? \"\" : op(num)); };\n\n/**\n * Given an alteration number, return the accidentals\n * @param {Number} alt \n * @return {String}\n * @example\n * note.altToAcc(-3) // => 'bbb'\n */\nexport var altToAcc = function (alt) { return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); }); };\n\n/**\n * Build a note name in scientific notation from note properties.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n * @param {Object} props - the note properties\n * @return {String} the note name in scientific notation or null if not valid properties\n * @example\n * note.build({ step: 5 }) // => \"A\"\n * note.build({ step: 1, acc: -1 }) // => 'Db'\n * note.build({ step: 2, acc: 2, oct: 2 }) // => 'E##2'\n * note.build({ step: 7 }) // => null\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n\n  var letter = stepToLetter(step);\n  if (!letter) { return null; }\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param [boolean] useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * const note = require('tonal-note')\n * note.fromMidi(61) // => 'Db4'\n * note.fromMidi(61, true) // => 'C#4'\n * // it rounds to nearest note\n * note.fromMidi(61.7) // => 'D4'\n */\nexport function fromMidi(num, sharps) {\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n","import { midi, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n * @example\n * array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n * Rotates a list a number of times. It's completly agnostic about the\n * contents of the list.\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n */\nexport var rotate = function (times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n};\n\n/**\n * Return a copy of the array with the null values removed\n * @param {Array} array\n * @return {Array}\n * @example\n * tonal.compact(['a', 'b', null, 'c']) // => ['a', 'b', 'c']\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (n) {\n  var m = midi(n);\n  return m !== null ? m : midi(n + \"-100\");\n};\n\n/**\n * Sort an array of notes in ascending order\n * \n * @private\n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n * \n * @private\n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * import * as array from 'tonal-array'\n * array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of a list\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n * \n * @param {Array|Strng} list - the list\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-interval.svg)](https://www.npmjs.com/package/tonal-interval)\n * [![tonal](https://img.shields.io/badge/tonal-interval-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-interval` is a collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: 'M3', 'd-4'\n * - inverse shorthand notation: number and then type, for example: '3M', '-4d'\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: 'A4' can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as interval from 'tonal-interval'\n * // or const interval = require('tonal-interval')\n * interval.semitones('4P') // => 5\n * interval.invert('3m') // => '6M'\n * interval.simplify('9m') // => '2m'\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-interval](https://nodei.co/npm/tonal-interval.png?mini=true)](https://npmjs.org/package/tonal-interval/)\n *\n * ## API Documentation\n *\n * @module interval\n */\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\n\nexport var tokenize = function (str) {\n  var m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null,\n  ic: null\n});\n\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\n\nvar qToAlt = function (type, q) {\n  if (q === \"M\" && type === \"M\") { return 0; }\n  if (q === \"P\" && type === \"P\") { return 0; }\n  if (q === \"m\" && type === \"M\") { return -1; }\n  if (/^A+$/.test(q)) { return q.length; }\n  if (/^d+$/.test(q)) { return type === \"P\" ? -q.length : -q.length - 1; }\n  return null;\n};\n\nvar altToQ = function (type, alt) {\n  if (alt === 0) { return type === \"M\" ? \"M\" : \"P\"; }\n  else if (alt === -1 && type === \"M\") { return \"m\"; }\n  else if (alt > 0) { return fillStr(\"A\", alt); }\n  else if (alt < 0) { return fillStr(\"d\", type === \"P\" ? alt : alt + 1); }\n  else { return null; }\n};\n\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\n\nvar properties = function (str) {\n  var t = tokenize(str);\n  if (t === null) { return NO_IVL; }\n  var p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") { return NO_IVL; }\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = ((p.dir * (SIZES[p.step] + p.alt)) % 12 + 12) % 12;\n  p.ic = CLASSES[p.chroma];\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step \n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {String} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nexport function props(str) {\n  if (typeof str !== \"string\") { return NO_IVL; }\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval \n *\n * @function\n * @param {String} interval - the interval\n * @return {Integer} \n * @example\n * interval.num('m2') // => 2\n * interval.num('P9') // => 9\n * interval.num('P-4') // => -4\n */\nexport var num = function (str) { return props(str).num; };\n\n/**\n * Get interval name. Can be used to test if it's an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {String} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * interval.name('m-3') // => '-3m'\n * interval.name('3') // => null\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get interval type. Can be perfectable (1, 4, 5) or majorable (2, 3, 6, 7)\n * It does NOT return the actual quality.\n *\n * @function\n * @param {String} interval\n * @return {String} 'P' for perfectables, 'M' for majorables or null if not\n * valid interval\n * @example\n * interval.type('5A') // => 'P'\n */\nexport var type = function (str) { return props(str).type; };\n\n/**\n * Get size in semitones of an interval\n * \n * @function\n * @param {String} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from 'tonal-interval'\n * semitones('P4') // => 5\n * // or using tonal\n * tonal.interval.semitones('P5') // => 7\n */\nexport var semitones = function (str) { return props(str).semitones; };\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n * \n * @function\n * @param {String} str \n * @return {Number}\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * As paramter you can pass an interval in shorthand notation, an interval in\n * array notation or the number of semitones of the interval\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * interval.ic('P8') // => 0\n * interval.ic('m6') // => 4\n * ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nexport var ic = function (str) { return props(str).ic; };\n\n/**\n * Given a interval property object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n * \n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n * \n * @function\n * @param {Object} props - the interval property object\n *\n * @return {String} the interval name\n * @example\n * interval.build({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * interval.build({ num: 9, alt: -1 }) // => '9m'\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var num = ref.num;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct; if ( oct === void 0 ) oct = 1;\n  var dir = ref.dir;\n\n  if (step !== undefined) { num = step + 1 + 7 * oct; }\n  if (num === undefined) { return null; }\n\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String} interval - the interval to simplify\n * @return {String} the simplified interval\n *\n * @example\n * interval.simplify('9M') // => '2M'\n * ['8P', '9M', '10M', '11P', '12P', '13M', '14M', '15P'].map(interval.simplify)\n * // => [ '8P', '2M', '3M', '4P', '5P', '6M', '7M', '8P' ]\n * interval.simplify('2M') // => '2M'\n * interval.simplify('-2M') // => '7m'\n */\nexport var simplify = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  return p.simple + p.q;\n};\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String} the inverted interval\n *\n * @example\n * interval.invert('3m') // => '6M'\n * interval.invert('2M') // => '7m'\n */\nexport var invert = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  var step = (7 - p.step) % 7;\n  var alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return build({ step: step, alt: alt, oct: p.oct, dir: p.dir });\n};\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitraty, but deterministic.\n * \n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from 'tonal-interval'\n * fromSemitones(7) // => '5P'\n * // or using tonal\n * tonal.fromSemitones(-7) // => '-5P'\n */\nexport var fromSemitones = function (num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n * \n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // using ES6 import\n * import { interval, semitones, transpose } from 'tonal-distance'\n * semitones('C' ,'D') // => 2\n * interval('C4', 'G4') // => '5P'\n * transpose('C4', 'P5') // => 'G4'\n *\n * // included in tonal facade\n * const tonal = require('tonal');\n * tonal.distance.transpose('C4', 'P5')\n * tonal.distance.transposeBy('P5', 'C4')\n * \n * @module distance\n */\nimport { props as nprops, build as nbuild } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from 'C':\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor(f * 7 / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for ['F', 'C', 'G', 'D', 'A', 'E', 'B'] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(nprops);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n * \n * This function can be partially applied.\n * \n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from 'tonal-distance'\n * transpose('d3', '3M') // => 'F#3'\n * // it works with pitch classes\n * transpose('D', '3M') // => 'F#'\n * // can be partially applied\n * ['C', 'D', 'E', 'F', 'G'].map(transpose('M3)) // => ['E', 'F#', 'G#', 'A', 'B']\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return nbuild(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths. \n * \n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class \n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n * \n * @example\n * import { trFifths } from 'tonal-transpose'\n * [0, 1, 2, 3, 4].map(trFifths('C')) // => ['C', 'G', 'D', 'A', 'E']\n * // or using tonal\n * tonal.trFifths('G4', 1) // => 'D'\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return nbuild(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n * \n * Can be partially applied.\n * \n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class \n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n * \n * Can be partially applied.\n * \n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from 'tonal-distance'\n * transposeBy('3m', '5P') // => '7m'\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals \n * \n * Can be partially applied.\n * \n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from 'tonal-distance'\n * add('3m', '5P') // => '7m'\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n * \n * Can be partially applied\n * \n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes \n * (both must be pitch classes and the interval is always ascending)\n * \n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from 'tonal-distance'\n * interval('C2', 'C3') // => 'P8'\n * interval('G', 'B') // => 'M3'\n * \n * // or use tonal\n * var tonal = require('tonal')\n * tonal.distance.interval('M2', 'P5') // => 'P4'\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor((t[0] - f[0]) * 7 / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n * \n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from 'tonal-distance'\n * semitones('C3', 'A2') // => -3\n * // or use tonal\n * tonal.distance.semitones('C3', 'G3') // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = nprops(from);\n  var t = nprops(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * var pcset = require('tonal-pcset')\n * pcset.isEqual('c2 d5 e6', 'c6 e3 d1') // => true\n * ```\n *\n * ## API documentation\n *\n * @module pcset\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar compact = function (arr) { return arr.filter(function (x) { return x; }); };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It's a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * pcset.chroma([\"C\", \"D\", \"E\"]) // => '1010100000000'\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with '0'\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with '0'\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * pcset.modes([\"C\", \"D\", \"E\"]).map(pcset.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * pcset.isChroma('101010101010') // => true\n * pcset.isChroma('101001') // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it's intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * pcset.intervals('1010100000000') => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a \n * subset of a given set \n * \n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set \n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set \n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * pcset.includes([\"C\", \"D\", \"E\"], 'C4') // => true\n * pcset.includes([\"C\", \"D\", \"E\"], 'C#4') // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ 'c2', 'd2', 'c3', 'd3' ])\n * pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ 'c2', 'c3' ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * scale.notes('Ab bebop') // => [ 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'G' ]\n * scale.names() => ['major', 'minor', ...]\n * @module scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object} \n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * const scale = require('tonal-scale')\n * scale.names() // => ['maj7', ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * scale.intervals('major') // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale. \n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic \n * @param {String} name - the scale name\n * @return {Array} a pitch classes array\n * \n * @example\n * scale.notes(\"C\", 'major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]\n * scale.notes(\"C4\", 'major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]\n * scale.notes(\"A4\", \"no-scale\") // => []\n * scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n * \n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split \n * that components.\n * \n * It retuns an array with the form [ name, tonic ] where tonic can be a \n * note name or null and name can be any arbitrary string \n * (this function doesn't check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * scale.tokenize('C mixolydean') // => [\"C\", \"mixolydean\"]\n * scale.tokenize('anything is valid') // => [null, \"anything is valid\"]\n * scale.tokenize() // => [null, null]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [null, null]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str);\n  var name = tonic !== null ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : null];\n}\n\n/**\n * Find mode names of a scale\n * \n * @function\n * @param {String} name - scale name\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n * \n * @function\n * @param {String} name\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from \n * the first note of the array\n * \n * @function\n * @param {Array} notes \n * @return {Array}\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of scale names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of scale names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * const chord = require('tonal-chord')\n * chord.notes('CMaj7') // => ['C', 'E', 'G', 'B']\n *\n * @module chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * import * as chord from 'tonal-chord'\n * chord.names() // => ['maj7', ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n * \n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n * \n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n * \n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: 'Cmaj7') or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic\n * @return [String] name - (Optional) name if the first parameter is the tonic\n *\n * @example\n * chord.notes('Cmaj7') // => ['C', 'E', 'G', 'B']\n * chord.notes('C', 'maj7') // => ['C', 'E', 'G', 'B']\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n * \n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * chord.exists('CMaj7') // => true\n * chord.exists('Maj7') // => true\n * chord.exists('Ablah') // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type \n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * chord.tokenize('Cmaj7') // => [ 'C', 'maj7' ]\n * chord.tokenize('C7') // => [ 'C', '7' ]\n * chord.tokenize('mMaj7') // => [ null, 'mMaj7' ]\n * chord.tokenize('Cnonsense') // => [ 'C', 'nonsense' ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [null, name]; }\n\n  // 6 and 7 is consider part of the chord\n  if (p[0] !== \"\" && (p[2][0] === \"6\" || p[2][0] === \"7\")) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","\nvar arguments$1 = arguments;\n/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n * [![tonal](https://img.shields.io/badge/tonal-key-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-key` is a collection of functions to query about tonal keys.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * const key = require('tonal-key')\n * key.scale('E mixolydian') // => [ 'E', 'F#', 'G#', 'A', 'B', 'C#', 'D' ]\n * key.relative('minor', 'C major') // => 'A minor'\n *\n * @module key\n */\nimport { rotate, range } from \"tonal-array\";\nimport { tokenize as split, altToAcc } from \"tonal-note\";\nimport { trFifths, fifths, interval, transpose } from \"tonal-distance\";\n\nvar MODES = \"major dorian phrygian lydian mixolydian minor locrian ionian aeolian\".split(\n  \" \"\n);\nvar NUMS = [0, 1, 2, 3, 4, 5, 6, 0, 5];\nvar NOTES = \"C D E F G A B\".split(\" \");\nvar CHORDS = \"Maj7 m7 m7 Maj7 7 m7 m7b5\".split(\" \");\nvar DEGREES = \"I II III IV V VI VII\".split(\" \");\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5, 0, 3];\n\nvar modenum = function (mode) { return NUMS[MODES.indexOf(mode)]; };\n\n/**\n * Get a list of valid mode names. The list of modes will be always in\n * increasing order (ionian to locrian)\n *\n * @function\n * @param {Boolean} alias - true to get aliases names\n * @return {Array} an array of strings\n * @example\n * key.modes() // => [ 'ionian', 'dorian', 'phrygian', 'lydian',\n * // 'mixolydian', 'aeolian', 'locrian' ]\n * key.modes(true) // => [ 'ionian', 'dorian', 'phrygian', 'lydian',\n * // 'mixolydian', 'aeolian', 'locrian', 'major', 'minor' ]\n */\nexport var modeNames = function (aliases) { return aliases === true ? MODES.slice() : MODES.slice(0, 7); };\n\n/**\n * Create a major key from alterations\n * \n * @function\n * @param {Integer} alt - the alteration number (positive sharps, negative flats)\n * @return {Key} the key object\n * @example\n * var key = require('tonal-key')\n * key.fromAlter(2) // => 'D major'\n */\nexport var fromAlter = function (i) { return trFifths(\"C\", i) + \" major\"; };\n\nexport var names = function (alt) {\n  if ( alt === void 0 ) alt = 4;\n\n  alt = Math.abs(alt);\n  var result = [];\n  for (var i = -alt; i <= alt; i++) { result.push(fromAlter(i)); }\n  return result;\n};\n\nvar NO_KEY = Object.freeze({\n  name: null,\n  tonic: null,\n  mode: null,\n  modenum: null,\n  intervals: [],\n  scale: [],\n  alt: null,\n  acc: null\n});\n\nvar properties = function (name) {\n  var p = tokenize(name);\n  if (p[0] === null) { return NO_KEY; }\n  var k = { tonic: p[0], mode: p[1] };\n  k.name = k.tonic + \" \" + k.mode;\n  k.modenum = modenum(k.mode);\n  var cs = rotate(k.modenum, NOTES);\n  k.alt = fifths(\"C\", k.tonic) - FIFTHS[MODES.indexOf(k.mode)];\n  k.acc = altToAcc(k.alt);\n  k.intervals = cs.map(interval(cs[0]));\n  k.scale = k.intervals.map(transpose(k.tonic));\n  return Object.freeze(k);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Return the a key properties object with the following information:\n *\n * - name {String}: name\n * - tonic {String}: key tonic\n * - mode {String}: key mode\n * - modenum {Number}: mode number (0 major, 1 dorian, ...)\n * - intervals {Array}: the scale intervals\n * - scale {Array}: the scale notes\n * - acc {String}: accidentals of the key signature\n * - alt {Number}: alteration number (a numeric representation of accidentals)\n *\n * @function\n * @param {String} name - the key name\n * @return {Object} the key properties object or null if not a valid key\n * @example\n * var key = require('tonal-key')\n * key.props('C3 dorian') // => { tonic: 'C', mode: 'dorian', ... }\n */\nexport var props = memo(properties);\n\n/**\n * Get scale of a key\n *\n * @function\n * @param {String|Object} key\n * @return {Array} the key scale\n * @example\n * key.scale('A major') // => [ 'A', 'B', 'C#', 'D', 'E', 'F#', 'G#' ]\n * key.scale('Bb minor') // => [ 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'Ab' ]\n * key.scale('C dorian') // => [ 'C', 'D', 'Eb', 'F', 'G', 'A', 'Bb' ]\n * key.scale('E mixolydian') // => [ 'E', 'F#', 'G#', 'A', 'B', 'C#', 'D' ]\n */\nexport var scale = function (str) { return props(str).scale; };\n\n/**\n * Get a list of key scale degrees\n * @param {String} keyName\n * @return {Array}\n * @example\n * tonal.key.degrees('C major') => [\"I\", \"ii\", \"iii\", \"IV\", \"V\", \"vi\", \"vii\"]\n */\nexport var degrees = function (str) {\n  var p = props(str);\n  if (p.name === null) { return []; }\n  var chords = rotate(p.modenum, CHORDS);\n  return chords.map(function (chord, i) {\n    var deg = DEGREES[i];\n    return chord[0] === \"m\" ? deg.toLowerCase() : deg;\n  });\n};\n\n/**\n * Get a list of the altered notes of a given key. The notes will be in\n * the same order than in the key signature.\n * \n * @function\n * @param {String} key - the key name\n * @return {Array}\n * @example\n * var key = require('tonal-keys')\n * key.alteredNotes('Eb major') // => [ 'Bb', 'Eb', 'Ab' ]\n */\nexport var alteredNotes = function (name) {\n  var alt = props(name).alt;\n  if (alt === null) { return null; }\n  return alt === 0\n    ? []\n    : alt > 0\n      ? range(1, alt).map(trFifths(\"B\"))\n      : range(-1, alt).map(trFifths(\"F\"));\n};\n\n/**\n * Get key chords\n * \n * @function\n * @param {String} name - the key name\n * @return {Array}\n * @example\n * key.chords(\"A major\") // => [\"AMaj7\", \"Bm7\", \"C#m7\", \"DMaj7\", ..,]\n */\nexport var chords = function (str) {\n  var p = props(str);\n  if (!p.name) { return []; }\n  var chords = rotate(p.modenum, CHORDS);\n  return p.scale.map(function (tonic, i) { return tonic + chords[i]; });\n};\n\n/**\n * Get secondary dominant key chords\n * \n * @function\n * @param {String} name - the key name\n * @return {Array}\n * @example\n * key.secDomChords(\"A major\") // => [\"E7\", \"F#7\", ...]\n */\n\nexport var secDomChords = function (name) {\n  var p = props(name);\n  if (!p.name) { return []; }\n  return p.scale.map(function (t) { return transpose(t, \"P5\") + \"7\"; });\n};\n\n/**\n * Get relative of a key. Two keys are relative when the have the same\n * key signature (for example C major and A minor)\n *\n * It can be partially applied.\n *\n * @function\n * @param {String} mode - the relative destination\n * @param {String} key - the key source\n * @example\n * key.relative('dorian', 'B major') // => 'C# dorian'\n * // partial application\n * var minor = key.relative('minor')\n * minor('C major') // => 'A minor'\n * minor('E major') // => 'C# minor'\n */\nexport var relative = function (mode, key) {\n  if (arguments$1.length === 1) { return function (key) { return relative(mode, key); }; }\n  var num = modenum(mode.toLowerCase());\n  if (num === undefined) { return null; }\n  var k = props(key);\n  if (k.name === null) { return null; }\n  return trFifths(k.tonic, FIFTHS[num] - FIFTHS[k.modenum]) + \" \" + mode;\n};\n\n/**\n * Split the key name into its components (pitch class tonic and mode name)\n * \n * @function\n * @param {String} name \n * @return {Array} an array in the form [tonic, key]\n * @example\n * key.tokenize('C major') // => ['C', 'major']\n */\nexport var tokenize = function (name) {\n  var p = split(name);\n  p[3] = p[3].toLowerCase();\n  if (p[0] === \"\" || MODES.indexOf(p[3]) === -1) { return [null, null]; }\n  return [p[0] + p[1], p[3]];\n};\n","/**\n * @private\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n * [![tonal](https://img.shields.io/badge/tonal-dictionary-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * const dictionary= require('tonal-dictionary')\n * dictionary.chord('Maj7') // => ['1P', '3M', '5P', '7M']\n *\n * @module dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales.\n *\n * @private\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from 'tonal-dictionary'\n * scale('major') // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n/**\n * A dictionary of chords.\n *\n * @private\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { chord } from 'tonal-dictionary'\n * chord('Maj7') // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n * [![tonal](https://img.shields.io/badge/tonal-key-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-key` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n * The `tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `tonal.note.pc`\n *\n * It exports the following modules:\n * - note\n * - interval\n * - distance\n * - scale\n * - chord\n * - pcset\n * - key\n *\n * @example\n * var tonal = require('tonal')\n * tonal.distance.transpose(tonal.note.pc('C#2'), 'M3') // => 'E#'\n * tonal.chord.notes('Dmaj7') // => ['D', 'F#', 'A', 'C#']\n *\n * @module tonal\n */\nimport * as array from \"tonal-array\";\nimport * as note from \"tonal-note\";\nimport * as interval from \"tonal-interval\";\nimport * as distance from \"tonal-distance\";\nimport * as key from \"tonal-key\";\nimport * as scale from \"tonal-scale\";\nimport * as chord from \"tonal-chord\";\nimport * as pcset from \"tonal-pcset\";\n\nexport { array, note, interval, distance, key, scale, chord, pcset };\nexport default { array, note, interval, distance, key, scale, chord, pcset };\n"],"names":["tokenize","str","m","REGEX","exec","toUpperCase","replace","props","NO_NOTE","undefined","cache","properties","fromMidi","num","sharps","Math","round","SHARPS","FLATS","floor","ascR","b","n","a","descR","range","sort","src","compact","map","name","height","unique","arr","filter","i","NO_IVL","unaltered","f","transpose","note","interval","arguments","length","encodeNote","encodeIvl","tr","nbuild","decode","trFifths","fifths","from","to","t","transposeBy","addIntervals","ivl1","ivl2","dir","i1","i2","ibuild","decodeIvl","add","subtract","d","semitones","nprops","midi","chroma","set","isChroma","Array","isArray","chr","forEach","join","modes","normalize","binary","split","_","r","rotate","test","intervals","IVLS","isEqual","s1","s2","s","isSubsetOf","notes","pcsetNum","isSupersetOf","includes","nameOrTonic","p","exists","scale","indexOf","tonic","noteName","substring","NAMES","GROUPED","names","slice","namesEnh","grouped","Object","freeze","pc","step","alt","oct","freq","SEMI","tokens","letter","acc","charCodeAt","midiToFreq","tuning","pow","L2","log","L440","freqToMidi","v","stepToLetter","fillStr","numToStr","op","altToAcc","build","ref","times","len","concat","shuffle","rnd","random","permutations","reduce","perm","e","pos","newPerm","splice","RegExp","SIZES","CLASSES","q","type","simple","ic","abs","qToAlt","altToQ","numToStep","simplify","invert","IN","IQ","fromSemitones","c","o","FIFTHS","fOcts","FIFTH_OCTS","encode","STEPS","memo","fn","encoder","iprops","isDescending","arguments$1","MODES","NUMS","NOTES","CHORDS","DEGREES","modenum","mode","modeNames","aliases","fromAlter","result","push","NO_KEY","k","cs","degrees","chord","deg","toLowerCase","alteredNotes","chords","secDomChords","relative","key","notechr","ivlchr","parseInt","x","dictionary","raw","keys","data","index","ivls","alias","allKeys","dict","cdata","NO_SCALE","setnum","tonics","pcsetModes","inScale","toScale","pcset","supersets","isSuperset","subsets","isSubset","NO_CHORD","array","distance"],"mappings":"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"}