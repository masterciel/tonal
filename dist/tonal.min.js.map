{"version":3,"file":"tonal.min.js","sources":["../packages/note/build/es6.js","../packages/array/build/es6.js","../packages/interval/build/es6.js","../packages/distance/build/es6.js","../packages/pcset/build/es6.js","../packages/scale/build/es6.js","../packages/chord/build/es6.js","../packages/dictionary/build/es6.js","../packages/tonal/index.js"],"sourcesContent":["/**\n * [![npm version](https://img.shields.io/npm/v/tonal-note.svg)](https://www.npmjs.com/package/tonal-note)\n * [![tonal](https://img.shields.io/badge/tonal-note-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-note` is a collection of functions to manipulate musical notes in scientific notation\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as note from 'tonal-note'\n * // or const note = require('tonal-note')\n * note.name('bb2') // => 'Bb2'\n * note.chroma('bb2') // => 10\n * note.midi('a4') // => 69\n * note.freq('a4') // => 440\n * note.oct('G3') // => 3\n * \n * // part of tonal\n * const tonal = require('tonal')\n * tonal.note.midi('d4') // => 62\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-note](https://nodei.co/npm/tonal-note.png?mini=true)](https://npmjs.org/package/tonal-note/)\n *\n * ## API Documentation\n *\n * @module note\n */\n\nvar NAMES = \"C C# Db D D# Eb E F F# Gb G G# Ab A A# Bb B\".split(\" \");\n\n/**\n * Get a list of note names (pitch classes) within a octave\n * \n * @param {string} accTypes - (Optional, by default \" b#\"). A string with the \n * accidentals types: \" \" means no accidental, \"#\" means sharps, \"b\" mean flats,\n * can be conbined (see examples)\n * @return {Array}\n * @example\n * note.names(\" b\") // => [ 'C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B' ]\n * note.names(\" #\") // => [ 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B' ]\n */\nexport var names = function (accTypes) { return typeof accTypes !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) {\n        var acc = n[1] || \" \";\n        return accTypes.indexOf(acc) !== -1;\n      }); };\n\nvar SHARPS = names(\" #\");\nvar FLATS = names(\" b\");\nvar REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * Split a string into tokens related to note parts. \n * It returns an array of strings `[letter, accidental, octave, modifier]` \n * \n * It always returns an array\n * \n * @param {String} str \n * @return {Array} an array of note tokens\n * @example\n * note.tokenize('C#2') // => [\"C\", \"#\", \"2\", \"\"]\n * note.tokenize('Db3 major') // => [\"D\", \"b\", \"3\", \"major\"]\n * note.tokenize('major') // => [\"\", \"\", \"\", \"major\"]\n * note.tokenize('##') // => [\"\", \"##\", \"\", \"\"]\n * note.tokenize() // => [\"\", \"\", \"\", \"\"]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { str = \"\"; }\n  var m = REGEX.exec(str);\n  if (!m) { return null; }\n  return [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]];\n}\n\nvar NO_NOTE = Object.freeze({\n  pc: null,\n  name: null,\n  step: null,\n  alt: null,\n  oct: null,\n  octStr: null,\n  chroma: null,\n  midi: null,\n  freq: null\n});\n\nvar SEMI = [0, 2, 4, 5, 7, 9, 11];\nvar properties = function (str) {\n  var tokens = tokenize(str);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") { return NO_NOTE; }\n  var letter = tokens[0];\n  var acc = tokens[1];\n  var octStr = tokens[2];\n  var p = { letter: letter, acc: acc, octStr: octStr };\n  p.pc = p.letter + p.acc;\n  p.name = p.pc + octStr;\n  p.step = (p.letter.charCodeAt(0) + 3) % 7;\n  p.alt = p.acc[0] === \"b\" ? -p.acc.length : p.acc.length;\n  p.oct = octStr.length ? +octStr : null;\n  p.chroma = (SEMI[p.step] + p.alt + 120) % 12;\n  p.midi = p.oct !== null ? SEMI[p.step] + p.alt + 12 * (p.oct + 1) : null;\n  p.freq = midiToFreq(p.midi);\n  return Object.freeze(p);\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get note properties. It returns an object with the following information:\n * \n * - name {String}: the note name. The letter is always in uppercase\n * - letter {String}: the note letter, always in uppercase\n * - acc {String}: the note accidentals\n * - octave {Number}: the octave or null if not present\n * - pc {String}: the pitch class (letter + accidentals)\n * - step {Number}: number equivalent of the note letter. 0 means C ... 6 means B.\n * - alt {Number}: number equivalent of accidentals (negative are flats, positive sharps)\n * - chroma {Number}: number equivalent of the pitch class, where 0 is C, 1 is C# or Db, 2 is D...\n * - midi {Number}: the note midi number\n * - freq {Number}: the frequency using an equal temperament at 440Hz\n * \n * This function *always* returns an object with all this properties, but if it's\n * not a valid note all properties will be null.\n * \n * The returned object can't be mutated.\n * \n * @param {String} note - the note name in scientific notation\n * @return {Object} an object with the properties (or an object will all properties\n * set to null if not valid note)\n * @example\n * note.props('fx-3').name // => 'F##-3'\n * note.props('invalid').name // => null\n * note.props('C#3').oct // => 3\n * note.props().oct // => null\n */\nexport var props = memo(properties);\n\n/**\n * Given a note name, return the note name or null if not valid note.\n * The note name will ALWAYS have the letter in upercase and accidentals\n * using # or b\n * \n * Can be used to test if a string is a valid note name.\n *\n * @function\n * @param {Pitch|string}\n * @return {string}\n *\n * @example\n * const note = require('tonal-note')\n * note.name('cb2') // => 'Cb2'\n * ['c', 'db3', '2', 'g+', 'gx4'].map(note.name) // => ['C', 'Db3', null, null, 'G##4']\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get pitch class of a note. The note can be a string or a pitch array.\n *\n * @function\n * @param {string|Pitch}\n * @return {string} the pitch class\n * @example\n * tonal.pc('Db3') // => 'Db'\n * tonal.map(tonal.pc, 'db3 bb6 fx2') // => [ 'Db', 'Bb', 'F##']\n */\nexport var pc = function (str) { return props(str).pc; };\n\n/**\n * Get the note midi number\n * (an alias of tonal-midi `toMidi` function)\n *\n * @function\n * @param {string|Number} note - the note to get the midi number from\n * @return {Integer} the midi number or null if not valid pitch\n * @example\n * note.midi('C4') // => 60\n * note.midi(60) // => 60\n * @see midi.toMidi\n */\nexport var midi = function (note) { return props(note).midi || +note || null; };\n\n/**\n * Get the frequency from midi number\n * \n * @param {Number} midi - the note midi number\n * @param {Number} tuning - (Optional) 440 by default\n * @return {Number} the frequency or null if not valid note midi\n */\nexport var midiToFreq = function (midi, tuning) {\n    if ( tuning === void 0 ) tuning = 440;\n\n    return typeof midi === \"number\" ? Math.pow(2, (midi - 69) / 12) * tuning : null;\n};\n\n/**\n * Get the frequency of a note\n *\n * @function\n * @param {string|Number} note - the note name or midi note number\n * @return {Number} the frequency\n * @example\n * note.freq('A4') // => 440\n * note.freq(69) // => 440\n */\nexport var freq = function (note) { return props(note).freq || midiToFreq(note); };\n\nvar L2 = Math.log(2);\nvar L440 = Math.log(440);\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precission)\n * \n * @param {Number} frequency\n * @return {Number}\n * @example\n * note.freqToMidi(220)); //=> 57;\n * note.freqToMidi(261.62)); //=> 60;\n * note.freqToMidi(261)); //=> 59.96;\n */\nexport var freqToMidi = function (freq) {\n  var v = 12 * (Math.log(freq) - L440) / L2 + 69;\n  return Math.round(v * 100) / 100;\n};\n\n/**\n * Return the chroma of a note. The chroma is the numeric equivalent to the\n * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B\n *\n * @param {string} note - the note name\n * @return {Integer} the chroma number\n * @example\n * const note = require('tonal-note')\n * note.chroma('Cb') // => 11\n * ['C', 'D', 'E', 'F'].map(note.chroma) // => [0, 2, 4, 5]\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the octave of the given pitch\n *\n * @function\n * @param {string} note - the note\n * @return {Integer} the octave or null if doesn't have an octave or not a valid note\n * @example\n * note.oct('C#4') // => 4\n * note.oct('C') // => null\n * note.oct('blah') // => undefined\n */\nexport var oct = function (str) { return props(str).oct; };\n\nvar LETTERS = \"CDEFGAB\";\n/**\n * Given a step number return it's letter (0 = C, 1 = D, 2 = E)\n * @param {number} step \n * @return {string} the letter\n * @example\n * note.stepToLetter(3) // => \"F\"\n */\nexport var stepToLetter = function (step) { return LETTERS[step]; };\n\nvar fillStr = function (s, n) { return Array(n + 1).join(s); };\nvar numToStr = function (num, op) { return (typeof num !== \"number\" ? \"\" : op(num)); };\n\n/**\n * Given an alteration number, return the accidentals\n * @param {Number} alt \n * @return {String}\n * @example\n * note.altToAcc(-3) // => 'bbb'\n */\nexport var altToAcc = function (alt) { return numToStr(alt, function (alt) { return (alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt)); }); };\n\n/**\n * Build a note name in scientific notation from note properties.\n * It receives an object with:\n * - step: the note step (0 = C, 1 = D, ... 6 = B)\n * - alt: (optional) the alteration. Negative numbers are flats, positive sharps\n * - oct: (optional) the octave\n * @param {Object} props - the note properties\n * @return {String} the note name in scientific notation or null if not valid properties\n * @example\n * note.build({ step: 5 }) // => \"A\"\n * note.build({ step: 1, acc: -1 }) // => 'Db'\n * note.build({ step: 2, acc: 2, oct: 2 }) // => 'E##2'\n * note.build({ step: 7 }) // => null\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n\n  var letter = stepToLetter(step);\n  if (!letter) { return null; }\n  var pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n};\n\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * const note = require('tonal-note')\n * note.fromMidi(61) // => 'Db4'\n * note.fromMidi(61, true) // => 'C#4'\n * // it rounds to nearest note\n * note.fromMidi(61.7) // => 'D4'\n */\nexport function fromMidi(num, sharps) {\n  num = Math.round(num);\n  var pcs = sharps === true ? SHARPS : FLATS;\n  var pc = pcs[num % 12];\n  var o = Math.floor(num / 12) - 1;\n  return pc + o;\n}\n\n/**\n * Simplify the note: find an enhramonic note with less accidentals. \n * @param {String} note - the note to be simplified\n * @param {boolean} useSameAccType - (optional, true by default) set to true\n * to ensure the returned note has the same accidental types that the given note\n * @return {String} the simplfiied note or null if not valid note\n * @example\n * note.simplify(\"C##\") // => \"D\"\n * note.simplify(\"C###\") // => \"D#\"\n * note.simplify(\"C###\", false) // => \"Eb\"\n * note.simplify(\"B#4\") // => \"C5\"\n */\nexport var simplify = function (note, sameAcc) {\n  var ref = props(note);\n  var alt = ref.alt;\n  var chroma = ref.chroma;\n  var midi = ref.midi;\n  if (chroma === null) { return null; }\n  var useSharps = sameAcc === false ? alt < 0 : alt > 0;\n  return midi === null\n    ? pc(fromMidi(chroma, useSharps))\n    : fromMidi(midi, useSharps);\n};\n\n/**\n * Get the simplified and enhramonic note of the given one\n * @param {String} note \n * @return {String} the enhramonic note\n * @example\n * note.enharmonic('Db') // => 'C#'\n * note.enhramonic('C') // => 'C'\n */\nexport var enharmonic = function (note) { return simplify(note, false); };\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-array.svg?style=flat-square)](https://www.npmjs.com/package/tonal-array)\n * \n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n * \n * @example\n * import * as array;\n * array.sort([\"f\", \"a\", \"c\"]) // => ['C', 'F', 'A']\n *\n * @example\n * const array = require('tonal-array)\n * array.range(1, 4) // => [1, 2, 3, 4]\n * @module array\n */\nimport { midi, name } from \"tonal-note\";\n\n// ascending range\nfunction ascR(b, n) {\n  for (var a = []; n--; a[n] = n + b){ ; }\n  return a;\n}\n// descending range\nfunction descR(b, n) {\n  for (var a = []; n--; a[n] = b - n){ ; }\n  return a;\n}\n\n/**\n * Create a numeric range\n * @param {Number} from\n * @param {Number} to\n * @return {Array}\n * @example\n * array.range(-2, 2) // => [-2, -1, 0, 1, 2]\n * array.range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(a, b) {\n  return a === null || b === null\n    ? []\n    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1);\n}\n/**\n * \n * Rotates a list a number of times. It's completly agnostic about the\n * contents of the list.\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n */\nexport function rotate(times, arr) {\n  var len = arr.length;\n  var n = (times % len + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n * @example\n * tonal.compact(['a', 'b', null, 'c']) // => ['a', 'b', 'c']\n */\nexport var compact = function (arr) { return arr.filter(function (n) { return n === 0 || n; }); };\n\n// a function that get note heights (with negative number for pitch classes)\nvar height = function (n) {\n  var m = midi(n);\n  return m !== null ? m : midi(n + \"-100\");\n};\n\n/**\n * Sort an array of notes in ascending order\n * \n * @param {String|Array} notes\n * @return {Array} sorted array of notes\n */\nexport function sort(src) {\n  return compact(src.map(name)).sort(function (a, b) { return height(a) > height(b); });\n}\n\n/**\n * Get sorted notes with duplicates removed\n * \n * @function\n * @param {Array} notes\n */\nexport function unique(arr) {\n  return sort(arr).filter(function (n, i, a) { return i === 0 || n !== a[i - 1]; });\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @private\n * @function\n * @param {Array|String} arr - the array\n * @return {Array} the shuffled array\n *\n * @example\n * import * as array from 'tonal-array'\n * array.shuffle([\"C\", \"D\", \"E\", \"F\"])\n */\nexport var shuffle = function (arr, rnd) {\n  if ( rnd === void 0 ) rnd = Math.random;\n\n  var i, t;\n  var m = arr.length;\n  while (m) {\n    i = (rnd() * m--) | 0;\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n};\n\n/**\n * Get all permutations of a list\n * http://stackoverflow.com/questions/9960908/permutations-in-javascript\n * \n * @param {Array|Strng} list - the list\n * @return {Array<Array>} an array with all the permutations\n */\nexport var permutations = function (arr) {\n  if (arr.length === 0) { return [[]]; }\n  return permutations(arr.slice(1)).reduce(function(acc, perm) {\n    return acc.concat(\n      arr.map(function(e, pos) {\n        var newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      })\n    );\n  }, []);\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-interval.svg)](https://www.npmjs.com/package/tonal-interval)\n * [![tonal](https://img.shields.io/badge/tonal-interval-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-interval` is a collection of functions to create and manipulate music intervals.\n *\n * The intervals are strings in shorthand notation. Two variations are supported:\n *\n * - standard shorthand notation: type and number, for example: 'M3', 'd-4'\n * - inverse shorthand notation: number and then type, for example: '3M', '-4d'\n *\n * The problem with the standard shorthand notation is that some strings can be\n * parsed as notes or intervals, for example: 'A4' can be note A in 4th octave\n * or an augmented four. To remove ambiguity, the prefered notation in tonal is the\n * inverse shortand notation.\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * ## Usage\n *\n * ```js\n * import * as interval from 'tonal-interval'\n * // or const interval = require('tonal-interval')\n * interval.semitones('4P') // => 5\n * interval.invert('3m') // => '6M'\n * interval.simplify('9m') // => '2m'\n * ```\n *\n * ## Install\n *\n * [![npm install tonal-interval](https://nodei.co/npm/tonal-interval.png?mini=true)](https://npmjs.org/package/tonal-interval/)\n *\n * ## API Documentation\n *\n * @module interval\n */\n// shorthand tonal notation (with quality after number)\nvar IVL_TNL = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nvar IVL_STR = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nvar REGEX = new RegExp(\"^\" + IVL_TNL + \"|\" + IVL_STR + \"$\");\nvar SIZES = [0, 2, 4, 5, 7, 9, 11];\nvar TYPES = \"PMMPPMM\";\nvar CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];\nvar NAMES = \"1P 2m 2M 3m 3M 4P 5P 6m 6M 7m 7M 8P\".split(\" \");\n\n/**\n * List basic (perfect, major, minor) interval names within a octave \n * @param {String} qualities - (Optional, default \"PMm\") the valid types\n * @return {Array} the interval names\n * @example\n * tonal.interval.names() // => [ '1P', '2m', '2M', '3m', '3M', '4P', '5P', '6m', '6M', '7m', '7M', '8P' ]\n * tonal.interval.names(\"P\") // => [ '1P', '4P', '5P', '8P' ]\n * tonal.interval.names(\"PM\") // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M', '8P' ]\n * tonal.interval.names(\"Pm\") // => [ '1P', '2m', '3m', '4P', '5P', '6m', '7m', '8P' ]\n * t.interval.names(\"d\") // => []\n */\nexport var names = function (types) { return typeof types !== \"string\"\n    ? NAMES.slice()\n    : NAMES.filter(function (n) { return types.indexOf(n[1]) !== -1; }); };\n\nexport var tokenize = function (str) {\n  var m = REGEX.exec(str);\n  return m === null ? null : m[1] ? [m[1], m[2]] : [m[4], m[3]];\n};\n\nvar NO_IVL = Object.freeze({\n  name: null,\n  num: null,\n  q: null,\n  step: null,\n  alt: null,\n  dir: null,\n  type: null,\n  simple: null,\n  semitones: null,\n  chroma: null,\n  ic: null\n});\n\nvar fillStr = function (s, n) { return Array(Math.abs(n) + 1).join(s); };\n\nvar qToAlt = function (type, q) {\n  if (q === \"M\" && type === \"M\") { return 0; }\n  if (q === \"P\" && type === \"P\") { return 0; }\n  if (q === \"m\" && type === \"M\") { return -1; }\n  if (/^A+$/.test(q)) { return q.length; }\n  if (/^d+$/.test(q)) { return type === \"P\" ? -q.length : -q.length - 1; }\n  return null;\n};\n\nvar altToQ = function (type, alt) {\n  if (alt === 0) { return type === \"M\" ? \"M\" : \"P\"; }\n  else if (alt === -1 && type === \"M\") { return \"m\"; }\n  else if (alt > 0) { return fillStr(\"A\", alt); }\n  else if (alt < 0) { return fillStr(\"d\", type === \"P\" ? alt : alt + 1); }\n  else { return null; }\n};\n\nvar numToStep = function (num) { return (Math.abs(num) - 1) % 7; };\n\nvar properties = function (str) {\n  var t = tokenize(str);\n  if (t === null) { return NO_IVL; }\n  var p = { num: +t[0], q: t[1] };\n  p.step = numToStep(p.num);\n  p.type = TYPES[p.step];\n  if (p.type === \"M\" && p.q === \"P\") { return NO_IVL; }\n\n  p.name = \"\" + p.num + p.q;\n  p.dir = p.num < 0 ? -1 : 1;\n  p.simple = p.num === 8 || p.num === -8 ? p.num : p.dir * (p.step + 1);\n  p.alt = qToAlt(p.type, p.q);\n  p.oct = Math.floor((Math.abs(p.num) - 1) / 7);\n  p.semitones = p.dir * (SIZES[p.step] + p.alt + 12 * p.oct);\n  p.chroma = ((p.dir * (SIZES[p.step] + p.alt)) % 12 + 12) % 12;\n  p.ic = CLASSES[p.chroma];\n  return Object.freeze(p);\n};\n\nvar cache = {};\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: name\n * - num: number\n * - q: quality\n * - step: step \n * - alt: alteration\n * - dir: direction (1 ascending, -1 descending)\n * - type: \"P\" or \"M\" for perfectable or majorable\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n * - ic: the interval class\n *\n * @function\n * @param {String} interval - the interval\n * @return {Object} the interval in the form [number, alt]\n */\nexport function props(str) {\n  if (typeof str !== \"string\") { return NO_IVL; }\n  return cache[str] || (cache[str] = properties(str));\n}\n\n/**\n * Get the number of the interval \n *\n * @function\n * @param {String} interval - the interval\n * @return {Integer} \n * @example\n * interval.num('m2') // => 2\n * interval.num('P9') // => 9\n * interval.num('P-4') // => -4\n */\nexport var num = function (str) { return props(str).num; };\n\n/**\n * Get interval name. Can be used to test if it's an interval. It accepts intervals\n * as pitch or string in shorthand notation or tonal notation. It returns always\n * intervals in tonal notation.\n *\n * @function\n * @param {String} interval - the interval string or array\n * @return {String} the interval name or null if not valid interval\n * @example\n * interval.name('m-3') // => '-3m'\n * interval.name('3') // => null\n */\nexport var name = function (str) { return props(str).name; };\n\n/**\n * Get size in semitones of an interval\n * \n * @function\n * @param {String} ivl\n * @return {Integer} the number of semitones or null if not an interval\n * @example\n * import { semitones } from 'tonal-interval'\n * semitones('P4') // => 5\n * // or using tonal\n * tonal.interval.semitones('P5') // => 7\n */\nexport var semitones = function (str) { return props(str).semitones; };\n\n/**\n * Get the chroma of the interval. The chroma is a number between 0 and 7\n * that represents the position within an octave (pitch set)\n * \n * @function\n * @param {String} str \n * @return {Number}\n */\nexport var chroma = function (str) { return props(str).chroma; };\n\n/**\n * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)\n * number of a given interval.\n *\n * In musical set theory, an interval class is the shortest distance in\n * pitch class space between two unordered pitch classes\n *\n * As paramter you can pass an interval in shorthand notation, an interval in\n * array notation or the number of semitones of the interval\n *\n * @function\n * @param {String|Integer} interval - the interval or the number of semitones\n * @return {Integer} A value between 0 and 6\n *\n * @example\n * interval.ic('P8') // => 0\n * interval.ic('m6') // => 4\n * ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'].map(ic) // => [0, 2, 4, 5, 5, 3, 1]\n */\nexport var ic = function (str) { return props(str).ic; };\n\n/**\n * Given a interval property object, get the interval name\n *\n * The properties must contain a `num` *or* `step`, and `alt`:\n * \n * - num: the interval number\n * - step: the interval step (overrides the num property)\n * - alt: the interval alteration\n * - oct: (Optional) the number of octaves\n * - dir: (Optional) the direction\n * \n * @function\n * @param {Object} props - the interval property object\n *\n * @return {String} the interval name\n * @example\n * interval.build({ step: 1, alt: -1, oct: 0, dir: 1 }) // => \"1d\"\n * interval.build({ num: 9, alt: -1 }) // => '9m'\n */\nexport var build = function (ref) {\n  if ( ref === void 0 ) ref = {};\n  var num = ref.num;\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct; if ( oct === void 0 ) oct = 1;\n  var dir = ref.dir;\n\n  if (step !== undefined) { num = step + 1 + 7 * oct; }\n  if (num === undefined) { return null; }\n\n  var d = dir < 0 ? \"-\" : \"\";\n  var type = TYPES[numToStep(num)];\n  return d + num + altToQ(type, alt);\n};\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {String} interval - the interval to simplify\n * @return {String} the simplified interval\n *\n * @example\n * interval.simplify('9M') // => '2M'\n * ['8P', '9M', '10M', '11P', '12P', '13M', '14M', '15P'].map(interval.simplify)\n * // => [ '8P', '2M', '3M', '4P', '5P', '6M', '7M', '8P' ]\n * interval.simplify('2M') // => '2M'\n * interval.simplify('-2M') // => '7m'\n */\nexport var simplify = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  return p.simple + p.q;\n};\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {String} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {String} the inverted interval\n *\n * @example\n * interval.invert('3m') // => '6M'\n * interval.invert('2M') // => '7m'\n */\nexport var invert = function (str) {\n  var p = props(str);\n  if (p === NO_IVL) { return null; }\n  var step = (7 - p.step) % 7;\n  var alt = p.type === \"P\" ? -p.alt : -(p.alt + 1);\n  return build({ step: step, alt: alt, oct: p.oct, dir: p.dir });\n};\n\n// interval numbers\nvar IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nvar IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitraty, but deterministic.\n * \n * @function\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {String} the interval name\n * @example\n * import { fromSemitones } from 'tonal-interval'\n * fromSemitones(7) // => '5P'\n * // or using tonal\n * tonal.fromSemitones(-7) // => '-5P'\n */\nexport var fromSemitones = function (num) {\n  var d = num < 0 ? -1 : 1;\n  var n = Math.abs(num);\n  var c = n % 12;\n  var o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-distance.svg)](https://www.npmjs.com/package/tonal-distance)\n * [![tonal](https://img.shields.io/badge/tonal-distance-yellow.svg)](https://github.com/danigb/tonal/tree/master/packages/tonal/distance)\n * \n * Transpose notes by intervals and find distances between notes\n *\n * @example\n * // using ES6 import\n * import { interval, semitones, transpose } from 'tonal-distance'\n * semitones('C' ,'D') // => 2\n * interval('C4', 'G4') // => '5P'\n * transpose('C4', 'P5') // => 'G4'\n *\n * // included in tonal facade\n * const tonal = require('tonal');\n * tonal.distance.transpose('C4', 'P5')\n * tonal.distance.transposeBy('P5', 'C4')\n * \n * @module distance\n */\nimport { props as nprops, build as nbuild } from \"tonal-note\";\nimport { props as iprops, build as ibuild } from \"tonal-interval\";\n\n// Map from letter step to number of fifths starting from 'C':\n// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }\nvar FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n\n// Given a number of fifths, return the octaves they span\nvar fOcts = function (f) { return Math.floor(f * 7 / 12); };\n\n// Get the number of octaves it span each step\nvar FIFTH_OCTS = FIFTHS.map(fOcts);\n\nvar encode = function (ref) {\n  var step = ref.step;\n  var alt = ref.alt;\n  var oct = ref.oct;\n  var dir = ref.dir; if ( dir === void 0 ) dir = 1;\n\n  var f = FIFTHS[step] + 7 * alt;\n  if (oct === null) { return [dir * f]; }\n  var o = oct - FIFTH_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n};\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for ['F', 'C', 'G', 'D', 'A', 'E', 'B'] we have:\nvar STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f) {\n  var i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n\nvar decode = function (f, o, dir) {\n  var step = STEPS[unaltered(f)];\n  var alt = Math.floor((f + 1) / 7);\n  if (o === undefined) { return { step: step, alt: alt, dir: dir }; }\n  var oct = o + 4 * alt + FIFTH_OCTS[step];\n  return { step: step, alt: alt, oct: oct, dir: dir };\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\nvar encoder = function (props) { return memo(function (str) {\n    var p = props(str);\n    return p.name === null ? null : encode(p);\n  }); };\n\nvar encodeNote = encoder(nprops);\nvar encodeIvl = encoder(iprops);\n\n/**\n * Transpose a note by an interval. The note can be a pitch class.\n * \n * This function can be partially applied.\n * \n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranpose } from 'tonal-distance'\n * transpose('d3', '3M') // => 'F#3'\n * // it works with pitch classes\n * transpose('D', '3M') // => 'F#'\n * // can be partially applied\n * ['C', 'D', 'E', 'F', 'G'].map(transpose('M3)) // => ['E', 'F#', 'G#', 'A', 'B']\n */\nexport function transpose(note, interval) {\n  if (arguments.length === 1) { return function (i) { return transpose(note, i); }; }\n  var n = encodeNote(note);\n  var i = encodeIvl(interval);\n  if (n === null || i === null) { return null; }\n  var tr = n.length === 1 ? [n[0] + i[0]] : [n[0] + i[0], n[1] + i[1]];\n  return nbuild(decode(tr[0], tr[1]));\n}\n\n/**\n * Transpose a pitch class by a number of perfect fifths. \n * \n * It can be partially applied.\n *\n * @function\n * @param {String} pitchClass - the pitch class \n * @param {Integer} fifhts - the number of fifths\n * @return {String} the transposed pitch class\n * \n * @example\n * import { trFifths } from 'tonal-transpose'\n * [0, 1, 2, 3, 4].map(trFifths('C')) // => ['C', 'G', 'D', 'A', 'E']\n * // or using tonal\n * tonal.trFifths('G4', 1) // => 'D'\n */\n\nexport function trFifths(note, fifths) {\n  if (arguments.length === 1) { return function (f) { return trFifths(note, f); }; }\n  var n = encodeNote(note);\n  if (n === null) { return null; }\n  return nbuild(decode(n[0] + fifths));\n}\n\n/**\n * Get the distance in fifths between pitch classes\n * \n * Can be partially applied.\n * \n * @param {String} to - note or pitch class\n * @param {String} from - note or pitch class \n */\nexport function fifths(from, to) {\n  if (arguments.length === 1) { return function (to) { return fifths(from, to); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (t === null || f === null) { return null; }\n  return t[0] - f[0];\n}\n\n/**\n * The same as transpose with the arguments inverted.\n * \n * Can be partially applied.\n * \n * @param {String} note\n * @param {String} interval\n * @return {String} the transposed note\n * @example\n * import { tranposeBy } from 'tonal-distance'\n * transposeBy('3m', '5P') // => '7m'\n */\nexport function transposeBy(interval, note) {\n  if (arguments.length === 1) { return function (n) { return transpose(n, interval); }; }\n  return transpose(note, interval);\n}\n\nvar isDescending = function (e) { return e[0] * 7 + e[1] * 12 < 0; };\nvar decodeIvl = function (i) { return isDescending(i) ? decode(-i[0], -i[1], -1) : decode(i[0], i[1], 1); };\n\nexport function addIntervals(ivl1, ivl2, dir) {\n  var i1 = encodeIvl(ivl1);\n  var i2 = encodeIvl(ivl2);\n  if (i1 === null || i2 === null) { return null; }\n  var i = [i1[0] + dir * i2[0], i1[1] + dir * i2[1]];\n  return ibuild(decodeIvl(i));\n}\n\n/**\n * Add two intervals \n * \n * Can be partially applied.\n * \n * @param {String} interval1\n * @param {String} interval2\n * @return {String} the resulting interval\n * @example\n * import { add } from 'tonal-distance'\n * add('3m', '5P') // => '7m'\n */\nexport function add(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, 1);\n}\n\n/**\n * Subtract two intervals\n * \n * Can be partially applied\n * \n * @param {String} minuend\n * @param {String} subtrahend\n * @return {String} interval diference\n */\nexport function subtract(ivl1, ivl2) {\n  if (arguments.length === 1) { return function (i2) { return add(ivl1, i2); }; }\n  return addIntervals(ivl1, ivl2, -1);\n}\n\n/**\n * Find the interval between two pitches. It works with pitch classes \n * (both must be pitch classes and the interval is always ascending)\n * \n * Can be partially applied\n *\n * @param {String} from - distance from\n * @param {String} to - distance to\n * @return {String} the interval distance\n *\n * @example\n * import { interval } from 'tonal-distance'\n * interval('C2', 'C3') // => 'P8'\n * interval('G', 'B') // => 'M3'\n * \n * // or use tonal\n * var tonal = require('tonal')\n * tonal.distance.interval('M2', 'P5') // => 'P4'\n */\nexport function interval(from, to) {\n  if (arguments.length === 1) { return function (t) { return interval(from, t); }; }\n  var f = encodeNote(from);\n  var t = encodeNote(to);\n  if (f === null || t === null || f.length !== t.length) { return null; }\n  var d =\n    f.length === 1\n      ? [t[0] - f[0], -Math.floor((t[0] - f[0]) * 7 / 12)]\n      : [t[0] - f[0], t[1] - f[1]];\n  return ibuild(decodeIvl(d));\n}\n\n/**\n * Get the distance between two notes in semitones\n * \n * @param {String|Pitch} from - first note\n * @param {String|Pitch} to - last note\n * @return {Integer} the distance in semitones or null if not valid notes\n * @example\n * import { semitones } from 'tonal-distance'\n * semitones('C3', 'A2') // => -3\n * // or use tonal\n * tonal.distance.semitones('C3', 'G3') // => 7\n */\nexport function semitones(from, to) {\n  if (arguments.length === 1) { return function (t) { return semitones(from, t); }; }\n  var f = nprops(from);\n  var t = nprops(to);\n  return f.midi !== null && t.midi !== null\n    ? t.midi - f.midi\n    : f.chroma !== null && t.chroma !== null\n      ? (t.chroma - f.chroma + 12) % 12\n      : null;\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-pcset.svg?style=flat-square)](https://www.npmjs.com/package/tonal-pcset)\n * [![tonal](https://img.shields.io/badge/tonal-pcset-yellow.svg?style=flat-square)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-pcset` is a collection of functions to work with pitch class sets, oriented\n * to make comparations (isEqual, isSubset, isSuperset)\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * You can install via npm: `npm i --save tonal-pcset`\n *\n * ```js\n * var pcset = require('tonal-pcset')\n * pcset.isEqual('c2 d5 e6', 'c6 e3 d1') // => true\n * ```\n *\n * ## API documentation\n *\n * @module pcset\n */\nimport { chroma as notechr } from \"tonal-note\";\nimport { chroma as ivlchr } from \"tonal-interval\";\nimport { rotate } from \"tonal-array\";\n\nvar chr = function (str) { return notechr(str) || ivlchr(str) || 0; };\nvar pcsetNum = function (set) { return parseInt(chroma(set), 2); };\nvar compact = function (arr) { return arr.filter(function (x) { return x; }); };\n\n/**\n * Get chroma of a pitch class set. A chroma identifies each set uniquely.\n * It's a 12-digit binary each presenting one semitone of the octave.\n *\n * Note that this function accepts a chroma as parameter and return it\n * without modification.\n *\n * @param {Array|String} set - the pitch class set\n * @return {String} a binary representation of the pitch class set\n * @example\n * pcset.chroma([\"C\", \"D\", \"E\"]) // => '1010100000000'\n */\nexport function chroma(set) {\n  if (isChroma(set)) { return set; }\n  if (!Array.isArray(set)) { return \"\"; }\n  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  set.map(chr).forEach(function (i) {\n    b[i] = 1;\n  });\n  return b.join(\"\");\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with '0'\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|String} set - the list of notes or pitchChr of the set\n * @param {Boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with '0'\n * @return {Array<String>} an array with all the modes of the chroma\n *\n * @example\n * pcset.modes([\"C\", \"D\", \"E\"]).map(pcset.intervals)\n */\nexport function modes(set, normalize) {\n  normalize = normalize !== false;\n  var binary = chroma(set).split(\"\");\n  return compact(\n    binary.map(function(_, i) {\n      var r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    })\n  );\n}\n\nvar REGEX = /^[01]{12}$/;\n/**\n * Test if the given string is a pitch class set chroma.\n * @param {String} chroma - the pitch class set chroma\n * @return {Boolean} true if its a valid pcset chroma\n * @example\n * pcset.isChroma('101010101010') // => true\n * pcset.isChroma('101001') // => false\n */\nexport function isChroma(set) {\n  return REGEX.test(set);\n}\n\nvar IVLS = \"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\".split(\" \");\n/**\n * Given a pcset (notes or chroma) return it's intervals\n * @param {String|Array} pcset - the pitch class set (notes or chroma)\n * @return {Array} intervals or empty array if not valid pcset\n * @example\n * pcset.intervals('1010100000000') => [\"1P\", \"2M\", \"3M\"]\n */\nexport function intervals(set) {\n  if (!isChroma(set)) { return []; }\n  return compact(\n    set.split(\"\").map(function(d, i) {\n      return d === \"1\" ? IVLS[i] : null;\n    })\n  );\n}\n\n/**\n * Test if two pitch class sets are identical\n *\n * @param {Array|String} set1 - one of the pitch class sets\n * @param {Array|String} set2 - the other pitch class set\n * @return {Boolean} true if they are equal\n * @example\n * pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1, s2) {\n  if (arguments.length === 1) { return function (s) { return isEqual(s1, s); }; }\n  return chroma(s1) === chroma(s2);\n}\n\n/**\n * Create a function that test if a collection of notes is a \n * subset of a given set \n * \n * The function can be partially applied\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set \n * @return {boolean} true if notes is a subset of set, false otherwise\n * @example\n * const inCMajor = pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set, notes) {\n  if (arguments.length > 1) { return isSubsetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes & set) === notes;\n  };\n}\n\n/**\n * Create a function that test if a collectio of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Array|String} set - an array of notes or a chroma set string to test against\n * @param {Array|String} notes - an array of notes or a chroma set \n * @return {boolean} true if notes is a superset of set, false otherwise\n * @example\n * const extendsCMajor = pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set, notes) {\n  if (arguments.length > 1) { return isSupersetOf(set)(notes); }\n  set = pcsetNum(set);\n  return function(notes) {\n    notes = pcsetNum(notes);\n    return notes !== set && (notes | set) === notes;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n * @param {Array|String} set - the base set to test against\n * @param {String|Pitch} note - the note to test\n * @return {Boolean} true if the note is included in the pcset\n * @example\n * pcset.includes([\"C\", \"D\", \"E\"], 'C4') // => true\n * pcset.includes([\"C\", \"D\", \"E\"], 'C#4') // => false\n */\nexport function includes(set, note) {\n  if (arguments.length > 1) { return includes(set)(note); }\n  set = chroma(set);\n  return function(note) {\n    return set[chr(note)] === \"1\";\n  };\n}\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|String} set - the pitch class set notes\n * @param {Array|String} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ 'c2', 'd2', 'c3', 'd3' ])\n * pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ 'c2', 'c3' ])\n */\nexport function filter(set, notes) {\n  if (arguments.length === 1) { return function (n) { return filter(set, n); }; }\n  return notes.filter(includes(set));\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-scale.svg?style=flat-square)](https://www.npmjs.com/package/tonal-scale)\n * \n * A scale is a collection of pitches in ascending or descending order.\n *\n * This module provides functions to get and manipulate scales.\n *\n * @example\n * scale.notes('Ab bebop') // => [ 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'G' ]\n * scale.names() => ['major', 'minor', ...]\n * @module scale\n */\nimport { name as noteName, pc } from \"tonal-note\";\nimport {\n  modes as pcsetModes,\n  chroma,\n  isSubsetOf,\n  isSupersetOf\n} from \"tonal-pcset\";\nimport { transpose } from \"tonal-distance\";\nimport { scale, chord } from \"tonal-dictionary\";\nimport { compact, unique, rotate } from \"tonal-array\";\n\nvar NO_SCALE = Object.freeze({\n  name: null,\n  intervals: [],\n  names: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = scale(name);\n  if (!intervals) { return NO_SCALE; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = scale.names(s.chroma);\n  return Object.freeze(s);\n};\n\nvar memoize = function (fn, cache) { return function (str) { return cache[str] || (cache[str] = fn(str)); }; };\n\n/**\n * Get scale properties. It returns an object with:\n * - name: the scale name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the scale intervals\n * - chroma:  scale croma (see pcset)\n * - setnum: scale chroma number\n *\n * @function\n * @param {String} name - the scale name (without tonic)\n * @return {Object} \n */\nexport var props = memoize(properties, {});\n\n/**\n * Return the available scale names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the scale names\n *\n * @example\n * const scale = require('tonal-scale')\n * scale.names() // => ['maj7', ...]\n */\nexport var names = scale.names;\n\n/**\n * Given a scale name, return its intervals. The name can be the type and\n * optionally the tonic (which is ignored)\n *\n * It retruns an empty array when no scale found\n *\n * @function\n * @param {String} name - the scale name (tonic and type, tonic is optional)\n * @return {Array<String>} the scale intervals if is a known scale or an empty\n * array if no scale found\n * @example\n * scale.intervals('major') // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ]\n */\nexport var intervals = function (name) {\n  var p = tokenize(name);\n  return props(p[1]).intervals;\n};\n\n/**\n * Get the notes (pitch classes) of a scale. \n *\n * Note that it always returns an array, and the values are only pitch classes.\n *\n * @function\n * @param {String} tonic \n * @param {String} nameOrTonic - the scale name or tonic (if 2nd param)\n * @param {String} [name] - the scale name without tonic\n * @return {Array} a pitch classes array\n * \n * @example\n * scale.notes(\"C\", 'major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]\n * scale.notes(\"C major\") // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]\n * scale.notes(\"C4\", 'major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]\n * scale.notes(\"A4\", \"no-scale\") // => []\n * scale.notes(\"blah\", \"major\") // => []\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if the given name is a known scale from the scales dictionary\n * \n * @function\n * @param {String} name - the scale name\n * @return {Boolean}\n */\nexport function exists(name) {\n  var p = tokenize(name);\n  return scale(p[1]) !== undefined;\n}\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split \n * that components.\n * \n * It retuns an array with the form [ name, tonic ] where tonic can be a \n * note name or null and name can be any arbitrary string \n * (this function doesn't check if that scale name exists)\n *\n * @function\n * @param {String} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * scale.tokenize('C mixolydean') // => [\"C\", \"mixolydean\"]\n * scale.tokenize('anything is valid') // => [null, \"anything is valid\"]\n * scale.tokenize() // => [null, null]\n */\nexport function tokenize(str) {\n  if (typeof str !== \"string\") { return [\"\", \"\"]; }\n  var i = str.indexOf(\" \");\n  var tonic = noteName(str.substring(0, i)) || noteName(str) || \"\";\n  var name = tonic !== \"\" ? str.substring(tonic.length + 1) : str;\n  return [tonic, name.length ? name : \"\"];\n}\n\n/**\n * Find mode names of a scale\n * \n * @function\n * @param {String} name - scale name\n */\nexport var modeNames = function (name) {\n  var ivls = intervals(name);\n  var tonics = notes(name);\n\n  return pcsetModes(ivls)\n    .map(function (chroma, i) {\n      var name = scale.names(chroma)[0];\n      if (name) { return [tonics[i] || ivls[i], name]; }\n    })\n    .filter(function (x) { return x; });\n};\n\n/**\n * Get all chords that fits a given scale\n * \n * @function\n * @param {String} name\n */\nexport var chords = function (name) {\n  var inScale = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return inScale(chord(name)); });\n};\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from \n * the first note of the array\n * \n * @function\n * @param {Array} notes \n * @return {Array}\n */\nexport var toScale = function (notes) {\n  var pcset = compact(notes.map(pc));\n  if (!pcset.length) { return pcset; }\n  var tonic = pcset[0];\n  var scale = unique(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n};\n\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of scale names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSuperset(scale(name)); });\n};\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of scale names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return scale.names().filter(function (name) { return isSubset(scale(name)); });\n};\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-chord.svg)](https://www.npmjs.com/package/tonal-chord)\n * [![tonal](https://img.shields.io/badge/tonal-chord-yellow.svg)](https://www.npmjs.com/browse/keyword/tonal)\n *\n * `tonal-chord` is a collection of functions to manipulate musical chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * const chord = require('tonal-chord')\n * chord.notes('CMaj7') // => ['C', 'E', 'G', 'B']\n *\n * @module chord\n */\nimport { tokenize as split } from \"tonal-note\";\nimport { transpose } from \"tonal-distance\";\nimport { chord } from \"tonal-dictionary\";\nimport { chroma, isSubsetOf, isSupersetOf } from \"tonal-pcset\";\n\n/**\n * Return the available chord names\n *\n * @function\n * @param {boolean} aliases - true to include aliases\n * @return {Array} the chord names\n *\n * @example\n * import * as chord from 'tonal-chord'\n * chord.names() // => ['maj7', ...]\n */\nexport var names = chord.names;\n\nvar NO_CHORD = Object.freeze({\n  name: null,\n  names: [],\n  intervals: [],\n  chroma: null,\n  setnum: null\n});\n\nvar properties = function (name) {\n  var intervals = chord(name);\n  if (!intervals) { return NO_CHORD; }\n  var s = { intervals: intervals, name: name };\n  s.chroma = chroma(intervals);\n  s.setnum = parseInt(s.chroma, 2);\n  s.names = chord.names(s.chroma);\n  return s;\n};\n\nvar memo = function (fn, cache) {\n  if ( cache === void 0 ) cache = {};\n\n  return function (str) { return cache[str] || (cache[str] = fn(str)); };\n};\n\n/**\n * Get chord properties. It returns an object with:\n * \n * - name: the chord name\n * - names: a list with all possible names (includes the current)\n * - intervals: an array with the chord intervals\n * - chroma:  chord croma (see pcset)\n * - setnum: chord chroma number\n * \n * @function\n * @param {String} name - the chord name (without tonic)\n * @return {Object} an object with the properties or a object with all properties\n * set to null if not valid chord name\n */\nexport var props = memo(properties);\n\n/**\n * Get chord intervals. It always returns an array\n * \n * @function\n * @param {String} name - the chord name (optionally a tonic and type)\n * @return {Array<String>} a list of intervals or null if the type is not known\n */\nexport var intervals = function (name) { return props(tokenize(name)[1]).intervals; };\n\n/**\n * Get the chord notes of a chord. This function accepts either a chord name\n * (for example: 'Cmaj7') or a list of notes.\n *\n * It always returns an array, even if the chord is not found.\n *\n * @function\n * @param {String} nameOrTonic - name of the chord or the tonic (if the second parameter is present)\n * @param {String} [name] - (Optional) name if the first parameter is the tonic\n * @return {Array} an array of notes or an empty array\n *\n * @example\n * chord.notes('Cmaj7') // => ['C', 'E', 'G', 'B']\n * chord.notes('C', 'maj7') // => ['C', 'E', 'G', 'B']\n */\nexport function notes(nameOrTonic, name) {\n  var p = tokenize(nameOrTonic);\n  name = name || p[1];\n  return intervals(name).map(transpose(p[0]));\n}\n\n/**\n * Check if a given name correspond to a chord in the dictionary\n * \n * @function\n * @param {String} name\n * @return {Boolean}\n * @example\n * chord.exists('CMaj7') // => true\n * chord.exists('Maj7') // => true\n * chord.exists('Ablah') // => false\n */\nexport var exists = function (name) { return chord(tokenize(name)[1]) !== undefined; };\n\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of chord names\n */\nexport var supersets = function (name) {\n  if (!intervals(name).length) { return []; }\n  var isSuperset = isSupersetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSuperset(chord(name)); });\n};\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n * \n * @function\n * @param {String} name \n * @return {Array} a list of chord names\n */\nexport var subsets = function (name) {\n  var isSubset = isSubsetOf(intervals(name));\n  return chord.names().filter(function (name) { return isSubset(chord(name)); });\n};\n\n/**\n * Tokenize a chord name. It returns an array with the tonic and chord type \n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * @function\n * @param {String} name - the chord name\n * @return {Array} an array with [type, tonic]\n * @example\n * chord.tokenize('Cmaj7') // => [ 'C', 'maj7' ]\n * chord.tokenize('C7') // => [ 'C', '7' ]\n * chord.tokenize('mMaj7') // => [ \"\", 'mMaj7' ]\n * chord.tokenize('Cnonsense') // => [ 'C', 'nonsense' ]\n */\nexport function tokenize(name) {\n  var p = split(name);\n  if (p[0] === \"\") { return [\"\", name]; }\n\n  // 6 and 7 is consider part of the chord\n  if (p[0] !== \"\" && (p[2][0] === \"6\" || p[2][0] === \"7\")) {\n    return [p[0] + p[1], p[2] + p[3]];\n  } else {\n    return [p[0] + p[1] + p[2], p[3]];\n  }\n}\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-dictionary.svg)](https://www.npmjs.com/package/tonal-dictionary)\n *\n * `tonal-dictionary` contains a dictionary of musical scales and chords\n *\n * This is part of [tonal](https://www.npmjs.com/package/tonal) music theory library.\n *\n * @example\n * const dictionary= require('tonal-dictionary')\n * dictionary.chord('Maj7') // => ['1P', '3M', '5P', '7M']\n *\n * @module dictionary\n */\nimport sdata from \"./data/scales.json\";\nimport cdata from \"./data/chords.json\";\nimport { chroma } from \"tonal-pcset\";\n\nexport var dictionary = function (raw) {\n  var keys = Object.keys(raw).sort();\n  var data = [];\n  var index = [];\n\n  var add = function (name, ivls, chroma) {\n    data[name] = ivls;\n    index[chroma] = index[chroma] || [];\n    index[chroma].push(name);\n  };\n\n  keys.forEach(function (key) {\n    var ivls = raw[key][0].split(\" \");\n    var alias = raw[key][1];\n    var chr = chroma(ivls);\n\n    add(key, ivls, chr);\n    if (alias) { alias.forEach(function (a) { return add(a, ivls, chr); }); }\n  });\n  var allKeys = Object.keys(data).sort();\n\n  var dict = function (name) { return data[name]; };\n  dict.names = function (p) {\n    if (typeof p === \"string\") { return (index[p] || []).slice(); }\n    else { return (p === true ? allKeys : keys).slice(); }\n  };\n  return dict;\n};\n\nexport var combine = function (a, b) {\n  var dict = function (name) { return a(name) || b(name); };\n  dict.names = function (p) { return a.names(p).concat(b.names(p)); };\n  return dict;\n};\n\n/**\n * A dictionary of scales: a function that given a scale name (without tonic)\n * returns an array of intervals\n *\n * @function\n * @param {String} name\n * @return {Array} intervals\n * @example\n * import { scale } from 'tonal-dictionary'\n * scale('major') // => [\"1P\", \"2M\", ...]\n * scale.names(); // => [\"major\", ...]\n */\nexport var scale = dictionary(sdata);\n\n/**\n * A dictionary of chords: a function that given a chord type\n * returns an array of intervals\n *\n * @function\n * @param {String} type\n * @return {Array} intervals\n * @example\n * import { chord } from 'tonal-dictionary'\n * chord('Maj7') // => [\"1P\", \"3M\", ...]\n * chord.names(); // => [\"Maj3\", ...]\n */\nexport var chord = dictionary(cdata);\nexport var pcset = combine(scale, chord);\n","/**\n * [![npm version](https://img.shields.io/npm/v/tonal-key.svg?style=flat-square)](https://www.npmjs.com/package/tonal-key)\n *\n * The `tonal` module is a facade to the rest of the modules. They are namespaced,\n * so for example to use `pc` function from `tonal-note` you have to write:\n * `tonal.note.pc`\n *\n * It exports the following modules:\n * - note\n * - interval\n * - distance\n * - scale\n * - chord\n * - pcset\n *\n * @example\n * var tonal = require('tonal')\n * tonal.distance.transpose(tonal.note.pc('C#2'), 'M3') // => 'E#'\n * tonal.chord.notes('Dmaj7') // => ['D', 'F#', 'A', 'C#']\n *\n * @module tonal\n */\nimport * as array from \"tonal-array\";\nimport * as note from \"tonal-note\";\nimport * as interval from \"tonal-interval\";\nimport * as distance from \"tonal-distance\";\nimport * as scale from \"tonal-scale\";\nimport * as chord from \"tonal-chord\";\nimport * as pcset from \"tonal-pcset\";\n\nexport { array, note, interval, distance, scale, chord, pcset };\nexport default { array, note, interval, distance, scale, chord, pcset };\n"],"names":["tokenize","str","m","REGEX","exec","toUpperCase","replace","fromMidi","num","sharps","Math","round","SHARPS","FLATS","floor","ascR","b","n","a","descR","range","rotate","times","arr","len","length","slice","concat","sort","src","compact","map","name","height","unique","filter","i","props","NO_IVL","cache","properties","unaltered","f","transpose","note","interval","arguments","encodeNote","encodeIvl","tr","nbuild","decode","trFifths","fifths","from","to","t","transposeBy","addIntervals","ivl1","ivl2","dir","i1","i2","ibuild","decodeIvl","add","subtract","d","semitones","nprops","midi","chroma","set","isChroma","Array","isArray","chr","forEach","join","modes","normalize","binary","split","_","r","test","intervals","IVLS","isEqual","s1","s2","s","isSubsetOf","notes","pcsetNum","isSupersetOf","includes","nameOrTonic","p","exists","undefined","scale","indexOf","tonic","noteName","substring","NAMES","names","accTypes","acc","NO_NOTE","Object","freeze","pc","step","alt","oct","octStr","freq","SEMI","fn","tokens","letter","charCodeAt","midiToFreq","tuning","pow","L2","log","L440","freqToMidi","v","stepToLetter","fillStr","numToStr","op","altToAcc","build","ref","simplify","sameAcc","useSharps","enharmonic","shuffle","rnd","random","permutations","reduce","perm","e","pos","newPerm","splice","RegExp","SIZES","CLASSES","types","q","type","simple","ic","abs","qToAlt","altToQ","numToStep","invert","IN","IQ","fromSemitones","c","o","FIFTHS","fOcts","FIFTH_OCTS","encode","STEPS","memo","encoder","iprops","isDescending","notechr","ivlchr","parseInt","x","dictionary","raw","keys","data","index","ivls","push","key","alias","allKeys","dict","chord","cdata","NO_SCALE","setnum","modeNames","tonics","pcsetModes","chords","inScale","toScale","pcset","supersets","isSuperset","subsets","isSubset","NO_CHORD","array","distance"],"mappings":"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"}